use core::cell::RefCell;

use embassy_sync::blocking_mutex::CriticalSectionMutex;

use crate::config::VENDOR_ID;
use crate::mesh::{MESH_NODE_ST_PAR_LEN, mesh_node_st_t, mesh_node_st_val_t};
use crate::sdk::light::{AdvPrivate, AdvRspPrivate, BLT_FIFO_TX_PACKET_COUNT, BUFF_RESPONSE_PACKET_COUNT, IrqHandlerStatus, LightRxBuff, MESH_NODE_MASK_LEN, MESH_NODE_MAX_NUM, MeshPkt, PacketAttCmd, PacketAttData, PacketAttErrRsp, PacketAttMtu, PacketAttReadRsp, PacketAttValue, PacketAttWriteRsp, PacketCtrlUnknown, PacketFeatureRsp, PacketVersionInd};

#[repr(align(4))]
pub struct State {
    pub light_rx_wptr: usize,
    pub light_rx_buff: [LightRxBuff; 4],
    pub blt_tx_fifo: [[u8; 48]; BLT_FIFO_TX_PACKET_COUNT],
    pub blt_tx_wptr: usize,
    pub conn_update_successed: bool,
    pub buff_response: [PacketAttData; BUFF_RESPONSE_PACKET_COUNT],
    pub pair_rands: [u8; 8],
    pub pair_randm: [u8; 8],
    pub conn_update_cnt: usize,
    pub set_uuid_flag: bool,
    pub max_mesh_name_len: usize,
    pub led_event_pending: u32,
    pub led_count: u32,
    pub led_ton: u32,
    pub led_toff: u32,
    pub led_sel: u32,
    pub led_tick: u32,
    pub led_no: u32,
    pub led_is_on: u32,

    pub mesh_node_mask: [u32; MESH_NODE_MASK_LEN],
    pub get_mac_en: bool,
    pub mesh_pair_enable: bool,
    pub mesh_node_st: [mesh_node_st_t; MESH_NODE_MAX_NUM],
    pub pkt_user_cmd: MeshPkt,

    pub adv_pri_data: AdvPrivate,
    pub adv_rsp_pri_data: AdvRspPrivate,

    pub ble_ll_channel_num: usize,
    pub ble_ll_last_unmapped_ch: usize,
    pub ble_ll_channel_table: [u8; 40],

    pub pkt_version_ind: PacketVersionInd,
    pub rf_pkt_unknown_response: PacketCtrlUnknown,
    pub pkt_feature_rsp: PacketFeatureRsp,
    pub pkt_mtu_rsp: PacketAttMtu,
    pub pkt_err_rsp: PacketAttErrRsp,
    pub rf_packet_att_rsp: PacketAttReadRsp,
    pub pkt_write_rsp: PacketAttWriteRsp,
    pub att_service_discover_tick: u32,
    pub slave_link_time_out: u32,

    pub slave_timing_update: u32,
    pub slave_instant_next: u16,
    pub slave_chn_map: [u8; 5],
    pub slave_interval_old: u32,
    pub slave_link_interval: u32,
    pub slave_window_size_update: u32,
    pub ble_conn_timeout: u32,
    pub ble_conn_interval: u32,
    pub ble_conn_offset: u32,
    pub add_tx_packet_rsp_failed: u32,
    pub t_scan_rsp_intvl: u32,
    pub g_vendor_id: u16,
    pub light_rcv_rssi: u8,
    pub rcv_pkt_time: u32,
    pub light_conn_sn_master: u16,
    pub slave_window_size: u32,
    pub slave_timing_update2_flag: u32,
    pub slave_next_connect_tick: u32,
    pub slave_timing_update2_ok_time: u32,
    pub p_st_handler: IrqHandlerStatus,
    pub pkt_light_report: PacketAttCmd,

    pub adr_reset_cnt_idx: u32,
    pub reset_cnt: u8,
    pub clear_st: u8,
    pub reset_check_time: u32,
}

pub static STATE: CriticalSectionMutex<RefCell<State>> = CriticalSectionMutex::new(RefCell::new(State {
    light_rx_wptr: 0,
    light_rx_buff: [LightRxBuff {
        dma_len: 0,
        unk1: [0; 3],
        rssi: 0,
        unk2: [0; 3],
        rx_time: 0,
        sno: [0; 3],
        unk3: [0; 5],
        mac: [0; 4],
        unk4: [0; 40],
    }; 4],
    blt_tx_fifo: [[0; 48]; 8],
    blt_tx_wptr: 0,
    conn_update_successed: false,
    buff_response: [PacketAttData {
        dma_len: 0,
        _type: 0,
        rf_len: 0,
        l2cap: 0,
        chanid: 0,
        att: 0,
        hl: 0,
        hh: 0,
        dat: [0; 23],
    }; 48],
    pair_rands: [0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7],
    pair_randm: [0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7],
    conn_update_cnt: 0,
    set_uuid_flag: false,
    max_mesh_name_len: 16,
    led_event_pending: 0,
    led_count: 0,
    led_ton: 0,
    led_toff: 0,
    led_sel: 0,
    led_tick: 0,
    led_no: 0,
    led_is_on: 0,

    mesh_node_mask: [0; ((MESH_NODE_MAX_NUM + 31) >> 5) as usize],
    get_mac_en: false,
    mesh_pair_enable: false,
    mesh_node_st: [mesh_node_st_t {
        tick: 0,
        val: mesh_node_st_val_t {
            dev_adr: 0,
            sn: 0,
            par: [0; MESH_NODE_ST_PAR_LEN as usize],
        },
    }; MESH_NODE_MAX_NUM],

    pkt_user_cmd: MeshPkt {
        dma_len: 0x27,
        _type: 2,
        rf_len: 0x25,
        l2cap_len: 0xCCDD,
        chan_id: 0,
        src_tx: 0,
        handle1: 0,
        sno: [0; 3],
        src_adr: 0,
        dst_adr: 0,
        op: 0,
        vendor_id: 0,
        par: [0; 10],
        internal_par1: [0; 5],
        ttl: 0,
        internal_par2: [0; 4],
        no_use: [0; 4],
    },

    adv_pri_data: AdvPrivate {
        manufacture_id: VENDOR_ID,
        mesh_product_uuid: VENDOR_ID,
        mac_address: 0,
    },
    adv_rsp_pri_data: AdvRspPrivate {
        manufacture_id: VENDOR_ID,
        mesh_product_uuid: VENDOR_ID,
        mac_address: 0,
        product_uuid: 0x1234,
        status: 0x01,
        device_address: 0,
        rsv: [0; 16],
    },

    ble_ll_channel_num: 0,
    ble_ll_last_unmapped_ch: 0,
    ble_ll_channel_table: [0; 40],

    pkt_version_ind: PacketVersionInd {
        dma_len: 8,
        _type: 3,
        rf_len: 6,
        opcode: 0x0c,
        main_ver: 0x08,
        vendor: VENDOR_ID,
        sub_ver: 0x08,
    },
    rf_pkt_unknown_response: PacketCtrlUnknown {
        dma_len: 0x04,
        _type: 0x03,
        rf_len: 0x02,
        opcode: 0x07,
        data: [0],
    },
    pkt_feature_rsp: PacketFeatureRsp {
        dma_len: 0x0b,
        _type: 0x3,
        rf_len: 0x09,
        opcode: 0x09,
        data: [1, 0, 0, 0, 0, 0, 0, 0],
    },
    pkt_mtu_rsp: PacketAttMtu {
        dma_len: 0x09,
        _type: 2,
        rf_len: 0x07,
        l2cap_len: 0x03,
        chan_id: 0x04,
        opcode: 0x03,
        mtu: [0x17, 0x00],
    },
    pkt_err_rsp: PacketAttErrRsp {
        dma_len: 0x0b,
        _type: 0x02,
        rf_len: 0x09,
        l2cap_len: 0x05,
        chan_id: 0x04,
        opcode: 0x01,
        err_opcode: 0,
        err_handle: 0,
        err_reason: 0x0a,
    },
    rf_packet_att_rsp: PacketAttReadRsp {
        dma_len: 0,
        _type: 0,
        rf_len: 0,
        l2cap_len: 0,
        chan_id: 0,
        opcode: 0,
        value: [0; 22],
    },
    pkt_write_rsp: PacketAttWriteRsp {
        dma_len: 0x07,
        _type: 2,
        rf_len: 0x05,
        l2cap_len: 0x01,
        chan_id: 0x04,
        opcode: 0x13,
    },
    att_service_discover_tick: 0,
    slave_link_time_out: 0,

    slave_timing_update: 0,
    slave_instant_next: 0,
    slave_chn_map: [0; 5],
    slave_interval_old: 0,
    slave_link_interval: 0x9c400,
    slave_window_size_update: 0,
    ble_conn_timeout: 0,
    ble_conn_interval: 0,
    ble_conn_offset: 0,
    add_tx_packet_rsp_failed: 0,
    t_scan_rsp_intvl: 0x92,
    g_vendor_id: 0x211,
    light_rcv_rssi:0,
    rcv_pkt_time: 0,
    light_conn_sn_master: 0,
    slave_window_size: 0,
    slave_timing_update2_flag: 0,
    slave_next_connect_tick: 0,
    slave_timing_update2_ok_time: 0,
    p_st_handler: IrqHandlerStatus::None,
    pkt_light_report: PacketAttCmd {
        dma_len: 0x1D,
        _type: 2,
        rf_len: 0x1B,
        l2cap_len: 0x17,
        chan_id: 4,
        opcode: 0x1B,
        handle: 0x12,
        handle1: 0,
        value: PacketAttValue {
            sno: [0; 3],
            src: [0; 2],
            dst: [0; 2],
            val: [0xdc, 0x11, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        }
    },

    adr_reset_cnt_idx: 0,
    reset_cnt: 0,
    clear_st: 3,
    reset_check_time: 0,
}));