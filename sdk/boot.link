
/* to tell the linker the program begin from __start label in cstartup.s, thus do not treat it as a unused symbol */
ENTRY(__start)

SECTIONS
{
    . = 0x0;
        .vectors :
        {
        *(.vectors)
        *(.vectors.*)	/* MUST as follows, when compile with -ffunction-sections -fdata-sections, session name may changed */
        }
        .ram_code :
        {
	*main.o(.ram_code)
        *main.o(.ram_code.*)
        *ota_fw_ow.o(.ram_code)
        *ota_fw_ow.o(.ram_code.*)
        *flash.o(.ram_code)
        *flash.o(.ram_code.*)
        *(.ram_code)
        *(.ram_code.*)
        }
        
    . = (((. + 3) / 4)*4);
        PROVIDE(_rstored_ = . );
        
        
    PROVIDE(_ramcode_size_ = . );
	PROVIDE(_ramcode_size_div_16_ = (. + 15 ) / 16);
	PROVIDE(_ramcode_size_div_256_ = (. + 255) / 256);
	PROVIDE(_ramcode_size_div_16_align_256_ = ( (. + 255) / 256) * 16);
	PROVIDE(_ramcode_size_align_256_ = ( _ramcode_size_div_16_align_256_)* 16);

        .text :
        {
        *(.text)
        *(.text.*)
        }
        .rodata :
        {
        *(.rodata)
        *(.rodata.*)
        }

    . = (((. + 3) / 4)*4);
        PROVIDE(_dstored_ = .);
        PROVIDE(_code_size_ = .);
          
	. = __RAM_START_ADDR + 0x900 + (_ramcode_size_div_256_ * 0x100) + __DATA_ADR_OFFSET;	/* 0x100 alighned, must greater than or equal to:0x808000 + ram_code_size +  irq_vector(0x100) + IC_tag(0x100) + IC_cache(0x800) == 0x808a00 + ram_code_size */
        .data :	 /*is retention for 825x. is 'data' for others. must use name 'data'.*/
          AT ( _dstored_ )
        {
        . = (((. + 3) / 4)*4);
         PROVIDE(_start_data_ = . );
        *(.retention_data)
        *(.retention_data.*)
         *(.data);
         *(.data.*);
        . = (((. + 3) / 4)*4);
         PROVIDE(_end_data_ = . );
        }        

        .bss(NOLOAD) :	/*is retention for 825x. is 'bss' for others. must use name 'bss'.*/
        {
	    . = (((. + 3) / 4)*4);  /* new section, default 16 byte aligned*/
	    PROVIDE(_start_bss_ = .);
        *(.retention_bss)
        *(.retention_bss.*)
        *(.sbss)
        *(.sbss.*)
        *(.bss)
        *(.bss.*)
        }
        . = (((. + 3) / 4)*4);
    PROVIDE(_end_bss_ = .); /*_end_bss_ must outside of {}, if not it will not correct*/
          
        .retention_data : /*no retention data. only for 825x, use 'retention_data', because tdebug can't know private name*/
          AT (_dstored_ + (_end_data_ -  _start_data_))
        {
        . = (((. + 3) / 4)*4);
        PROVIDE(_no_retention_data_start_ = . );
        *(.no_ret_data)
        *(.no_ret_data.*)
        . = (((. + 3) / 4)*4);
        PROVIDE(_no_retention_data_end_ = . );
        }
        
        .retention_bss(NOLOAD) : /*no retention data. only for 825x, use 'retention_bss', because tdebug can't know private name*/
          AT (_dstored_ + (_end_data_ -  _start_data_) + (_no_retention_data_end_ - _no_retention_data_start_))
        {
        . = (((. + 3) / 4)*4);
        PROVIDE(_no_retention_bss_start_ = . );
        *(.no_ret_bss)
        *(.no_ret_bss.*)
        . = (((. + 3) / 4)*4);
        PROVIDE(_no_retention_bss_end_ = . );
        }

    PROVIDE(_bin_size_ = _code_size_ + (_end_data_ - _start_data_)+(_no_retention_data_end_ - _no_retention_data_start_));
    PROVIDE(_bin_size_div_16_ = (_bin_size_ + 15 ) / 16);
    PROVIDE(_ictag_start_ = __RAM_START_ADDR + (_ramcode_size_div_256_) * 0x100);		/*not for retention*/
    PROVIDE(_ictag_end_ = __RAM_START_ADDR + (_ramcode_size_div_256_ + 1) * 0x100);	/*not for retention*/
    
	/*PROVIDE(_ram_use_size_div_16_ = (_retention_data_end_ - 0x840000  + 15 ) / 16); only for 825x*/
    
}